
File: trading_analysis/analyze.py
  def load_model_runs_df()
    calls → ModelRun.date.asc
    calls → SessionLocal
    calls → df.set_index
    calls → df.sort_index
    calls → isinstance
    calls → json.loads
    calls → pd.DataFrame
    calls → pd.to_datetime
    calls → print
    calls → records.append
    calls → session.close
    calls → session.query
    calls → session.query(ModelRun).order_by
    calls → session.query(ModelRun).order_by(ModelRun.date.asc()).all

File: trading_analysis/models.py
  class Candle
  class ModelRun

File: trading_analysis/risk.py
  def calculate_position_size()
    calls → all
    calls → isinstance
    calls → print
  def generate_dynamic_tp_sl()
  def calculate_inverse_balance_risk()
    calls → logger.debug
    calls → max
    calls → min

File: trading_analysis/backtest.py
  def plot_trades()
    calls → dict
    calls → fig.add_trace
    calls → fig.update_layout
    calls → fig.write_html
    calls → go.Candlestick
    calls → go.Figure
    calls → go.Scatter
    calls → len
    calls → print
  def _process_take_profit()
  def _process_stop_loss()
  def _open_position()
    calls → row.get
  def _close_position_by_signal()
    calls → int
    calls → row.get
  def max_streak()
    calls → len
    calls → max
  def analyze_backtest()
    calls → isinstance
    calls → len
    calls → max_streak
    calls → print
    calls → sum
  def _print_backtest_results()
    calls → len
    calls → min
    calls → print
    calls → sum
  def _handle_active_position()
    calls → _process_stop_loss
    calls → _process_take_profit
    calls → checker
    calls → print
    calls → state.update
    calls → state['trades'].append
  def _try_open_position()
    calls → _open_position
    calls → calculate_position_size
    calls → state.get
    calls → state.update
    calls → state['trades'].append
  def _maybe_force_close()
    calls → _close_position_by_signal
    calls → state.update
    calls → state['trades'].append
  def _finalize_position()
    calls → print
    calls → state.update
    calls → state['trades'].append
  def _save_to_csv()
    calls → Path
    calls → Path(output_dir).mkdir
    calls → ast.literal_eval
    calls → df.to_csv
    calls → indicators.get
    calls → isinstance
    calls → len
    calls → pd.DataFrame
    calls → rows.append
  def _save_and_report()
    calls → _print_backtest_results
    calls → _save_to_csv
    calls → plot_trades
  def run_backtest()
    calls → _finalize_position
    calls → _handle_active_position
    calls → _maybe_force_close
    calls → _save_and_report
    calls → _try_open_position
    calls → analyze_backtest
    calls → df.iterrows
    calls → open_position.get
    calls → print
    calls → state.update
  def plot_equity_curve()
    calls → equity.append
    calls → equity_df.to_csv
    calls → len
    calls → pd.DataFrame
    calls → plt.figure
    calls → plt.grid
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
    calls → plt.xlabel
    calls → plt.ylabel
    calls → timestamps.append

File: trading_analysis/bybit_api.py
  def get_bybit_trading_symbols()
    calls → print
    calls → requests.get
    calls → response.json
    calls → response.raise_for_status
  def fetch_bybit_kline_raw()
    calls → RuntimeError
    calls → ValueError
    calls → bybit_client.get_kline
  def parse_kline_to_df()
    calls → df.astype
    calls → df.set_index
    calls → df.sort_index
    calls → df['timestamp'].astype
    calls → pd.DataFrame
    calls → pd.to_datetime
  def get_bybit_kline()
    calls → fetch_bybit_kline_raw
    calls → parse_kline_to_df
  def find_first_kline_timestamp()
    calls → RuntimeError
    calls → datetime.fromtimestamp
    calls → datetime.now
    calls → fetch_bybit_kline_raw
    calls → int
    calls → print
    calls → timedelta
    calls → ts.strftime
    calls → ts.timestamp

File: trading_analysis/executor.py
  def place_order()
    calls → client.place_order
    calls → print

File: trading_analysis/feature_selection.py
  def select_important_features()
    calls → ValueError
    calls → df[feature_cols + [target_col]].dropna
    calls → df_clean[target_col].astype
    calls → importance_df[importance_df['importance'] >= min_importance]['feature'].tolist
    calls → len
    calls → mutual_info_classif
    calls → np.unique
    calls → pd.DataFrame
    calls → pd.DataFrame({'feature': feature_cols, 'importance': importances}).sort_values
    calls → pd.api.types.is_integer_dtype
    calls → print
  def test_raises_on_single_class_target()
    calls → np.random.rand
    calls → pd.DataFrame
    calls → pytest.raises
    calls → select_important_features
  def test_returns_empty_when_no_important_features()
    calls → np.random.rand
    calls → np.random.randint
    calls → pd.DataFrame
    calls → select_important_features
  def test_select_important_features_verbose_capfd()
    calls → isinstance
    calls → np.random.rand
    calls → np.random.randint
    calls → pd.DataFrame
    calls → select_important_features
  def test_random_state_makes_result_deterministic()
    calls → np.random.rand
    calls → np.random.randint
    calls → pd.DataFrame
    calls → select_important_features

File: trading_analysis/signals.py
  def generate_signals_cached()
    calls → generate_signals
    calls → isinstance
    calls → json.loads
  def safe_assign()
    calls → series.astype
  def generate_signals()
    calls → (df['MACD'] < df['Signal']) & (df['MACD'].shift(1) >= df['Signal'].shift(1)) & (df['MACD'] < 0) & (df['Signal'] < 0).astype
    calls → (df['MACD'] > df['Signal']) & (df['MACD'].shift(1) <= df['Signal'].shift(1)) & (df['MACD'] > 0).astype
    calls → (df['RSI'] > 45) & (df['RSI'] < 75).astype
    calls → (df['StochRSI_K'] < 20) & (df['StochRSI_K'] > df['StochRSI_D']).astype
    calls → (df['StochRSI_K'] > 80) & (df['StochRSI_K'] < df['StochRSI_D']).astype
    calls → (df['volume'] - df['volume'].rolling(20).mean()) / df['volume'].rolling(20).std().fillna
    calls → df.copy
    calls → df['ADX'] > 20.astype
    calls → df['ATR'] > df['ATR'].rolling(50).mean().astype
    calls → df['ATR'].rolling
    calls → df['ATR'].rolling(50).mean
    calls → df['BBP'] > 0.5.astype
    calls → df['CCI'] < -100.astype
    calls → df['CCI'] > 100.astype
    calls → df['EMA_200'].diff
    calls → df['EMA_200'].diff() < 0.astype
    calls → df['EMA_9'] < df['EMA_21'].astype
    calls → df['EMA_9'] > df['EMA_21'].astype
    calls → df['MACD'].shift
    calls → df['MFI'] < 30.astype
    calls → df['MFI'] > 70.astype
    calls → df['ROC'] < -1.astype
    calls → df['ROC'] > 1.astype
    calls → df['RSI'] < 50.astype
    calls → df['Signal'].shift
    calls → df['TEMA_9'] < df['TEMA_21'].astype
    calls → df['TEMA_9'] > df['TEMA_21'].astype
    calls → df['close'] < df['EMA_200'].astype
    calls → df['close'] < df['EMA_9'].astype
    calls → df['close'] < donchian_low.shift(1).astype
    calls → df['close'] > df['BBM'].astype
    calls → df['close'] > df['EMA_200'].astype
    calls → df['close'] > donchian_high.shift(1).astype
    calls → df['high'].rolling
    calls → df['high'].rolling(window=20).max
    calls → df['low'].rolling
    calls → df['low'].rolling(window=20).min
    calls → df['volume'] > df['Volume_SMA_20'].astype
    calls → df['volume'] > df['volume'].rolling(10).max().shift(1).astype
    calls → df['volume'].rolling
    calls → df['volume'].rolling(10).max
    calls → df['volume'].rolling(10).max().shift
    calls → df['volume'].rolling(20).mean
    calls → df['volume'].rolling(20).std
    calls → df['volume_zscore'] > 2.astype
    calls → donchian_high.shift
    calls → donchian_low.shift
    calls → len
    calls → p
    calls → params.get
    calls → pd.Series
    calls → signal.split
    calls → sum
    calls → ta.adx
    calls → ta.atr
    calls → ta.cci
    calls → ta.mfi
    calls → ta.roc
    calls → ta.stochrsi
    calls → ta.tema
    calls → warnings.catch_warnings
    calls → warnings.simplefilter

File: trading_analysis/indicators.py
  def safe_assign_ema()
    calls → df.ta.ema
    calls → isinstance
  def calculate_indicators()
    calls → df.astype
    calls → df.ta.atr
    calls → df.ta.bbands
    calls → df.ta.macd
    calls → df.ta.rsi
    calls → df['volume'].rolling
    calls → df['volume'].rolling(window=20, min_periods=1).mean
    calls → pd.concat
    calls → safe_assign_ema
  def calculate_indicators_cached()
    calls → calculate_indicators
    calls → memory.cache

File: trading_analysis/websocket_kline.py

File: trading_analysis/cache.py

File: trading_analysis/__init__.py

File: trading_analysis/db.py
  def init_db()
    calls → Base.metadata.create_all
  def save_ohlcv_to_db()
    calls → Candle
    calls → Candle.timestamp.in_
    calls → SessionLocal
    calls → df.copy
    calls → df.copy().reset_index
    calls → df['timestamp'].astype
    calls → df['timestamp'].isin
    calls → df['timestamp'].tolist
    calls → int
    calls → new_rows.iterrows
    calls → print
    calls → session.bulk_save_objects
    calls → session.close
    calls → session.commit
    calls → session.query
    calls → session.query(Candle.timestamp).filter
    calls → session.query(Candle.timestamp).filter(Candle.symbol == symbol).filter
    calls → session.query(Candle.timestamp).filter(Candle.symbol == symbol).filter(Candle.interval == interval).filter
    calls → session.query(Candle.timestamp).filter(Candle.symbol == symbol).filter(Candle.interval == interval).filter(Candle.timestamp.in_(df['timestamp'].tolist())).all
    calls → set
  def load_ohlcv_from_db()
    calls → Candle.timestamp.asc
    calls → SessionLocal
    calls → ValueError
    calls → df.set_index
    calls → pd.DataFrame
    calls → pd.to_datetime
    calls → select
    calls → select(Candle).where
    calls → session.close
    calls → session.execute
    calls → session.execute(stmt).scalars
    calls → session.execute(stmt).scalars().all
    calls → stmt.limit
    calls → stmt.order_by
    calls → stmt.where
  def get_latest_timestamp()
    calls → SessionLocal
    calls → func.max
    calls → session.close
    calls → session.query
    calls → session.query(func.max(Candle.timestamp)).filter
    calls → session.query(func.max(Candle.timestamp)).filter(Candle.symbol == symbol).scalar
  def fetch_and_save_all_ohlcv()
    calls → datetime.now
    calls → datetime.now(timezone.utc).timestamp
    calls → df.index[-1].timestamp
    calls → find_first_kline_timestamp
    calls → get_bybit_kline
    calls → int
    calls → len
    calls → pbar.update
    calls → print
    calls → save_ohlcv_to_db
    calls → time.sleep
    calls → tqdm
  def interval_to_timedelta()
    calls → ValueError
    calls → int
    calls → interval.isdigit
    calls → timedelta
  def safe_check_ohlcv_integrity()
    calls → datetime.now
    calls → df.index.to_list
    calls → int
    calls → interval_to_timedelta
    calls → last_ts.replace
    calls → len
    calls → load_ohlcv_from_db
    calls → print
    calls → range
    calls → zip
  def convert_np()
    calls → convert_np
    calls → isinstance
    calls → obj.item
    calls → obj.items
  def save_model_run()
    calls → ModelRun
    calls → SessionLocal
    calls → convert_np
    calls → json.dumps
    calls → session.add
    calls → session.close
    calls → session.commit
  def get_first_candle_from_db()
    calls → Candle.timestamp.asc
    calls → SessionLocal
    calls → ValueError
    calls → datetime.fromtimestamp
    calls → pd.Series
    calls → select
    calls → select(Candle).where
    calls → select(Candle).where(Candle.symbol == symbol, Candle.interval == interval).order_by
    calls → select(Candle).where(Candle.symbol == symbol, Candle.interval == interval).order_by(Candle.timestamp.asc()).limit
    calls → session.close
    calls → session.execute
    calls → session.execute(stmt).scalar_one_or_none

File: trading_analysis/charts.py
  def plot_volume()
    calls → df.copy
    calls → df['volume'].quantile
    calls → pd.to_numeric
    calls → plt.bar
    calls → plt.figure
    calls → plt.grid
    calls → plt.legend
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
    calls → plt.ylim
    calls → zip
  def plot_macd()
    calls → df['MACD'].shift
    calls → df['Signal'].shift
    calls → plt.axhline
    calls → plt.bar
    calls → plt.figure
    calls → plt.grid
    calls → plt.legend
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
  def plot_rsi()
    calls → plt.axhline
    calls → plt.figure
    calls → plt.grid
    calls → plt.legend
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
  def plot_price_with_ema_bb()
    calls → plt.figure
    calls → plt.fill_between
    calls → plt.grid
    calls → plt.legend
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
  def generate_all_charts()
    calls → plot_macd
    calls → plot_price_with_ema_bb
    calls → plot_rsi
    calls → plot_volume
  def plot_backtest_progress()
    calls → df_trades.sort_values
    calls → df_trades['pnl'].cumsum
    calls → pd.DataFrame
    calls → pd.to_datetime
    calls → plt.figure
    calls → plt.grid
    calls → plt.legend
    calls → plt.plot
    calls → plt.savefig
    calls → plt.tight_layout
    calls → plt.title
    calls → plt.xlabel
    calls → plt.xticks
    calls → plt.ylabel
    calls → print

File: trading_analysis/utils.py
  def strip_indicators()
    calls → df.drop
  def should_update_data()
    calls → datetime.fromtimestamp
    calls → datetime.now
    calls → datetime.timedelta
  def split_train_val()
    calls → int
    calls → len
  def sanitize_params()
    calls → float
    calls → int
    calls → isinstance
    calls → params.items
  def prepare_params_for_logging()
    calls → config.get
    calls → config.get('best_params', {}).get
    calls → convert_np
    calls → params.copy

File: trading_analysis/realtime.py
  def update_live_kline()
    calls → float
    calls → int
    calls → kline_buffer[symbol].append
    calls → kline_buffer[symbol].clear
    calls → pd.to_datetime
  def get_live_kline()
  def merge_live_candle()
    calls → datetime.now
    calls → df.index.tz_localize
    calls → pd.DataFrame
    calls → pd.concat
    calls → pd.concat([df, row]).sort_index
    calls → print
    calls → timedelta
  def load_best_params()
    calls → Path
    calls → json.load
    calls → open
    calls → path.exists
  def run_analysis_for_symbol()
    calls → calculate_indicators_cached
    calls → generate_signals_cached
    calls → get_bybit_kline
    calls → get_live_kline
    calls → hash_dataframe
    calls → hash_params
    calls → json.dumps
    calls → load_best_params
    calls → load_ohlcv_from_db
    calls → merge_live_candle
    calls → print
    calls → sanitize_params
    calls → save_ohlcv_to_db

File: trading_analysis/tests/test_risk.py
  def test_calculate_position_size_normal()
    calls → abs
    calls → calculate_position_size
  def test_calculate_position_size_invalid_price_or_sl()
    calls → calculate_position_size
  def test_calculate_position_size_invalid_risk_or_leverage()
    calls → calculate_position_size
  def test_calculate_position_size_type_check()
    calls → calculate_position_size
  def test_calculate_position_size_high_sl_pct()
    calls → abs
    calls → calculate_position_size

File: trading_analysis/tests/test_backtest.py
  def make_long_test_df()
    calls → pd.DataFrame
  def test_run_backtest_basic_long_trade()
    calls → len
    calls → make_long_test_df
    calls → run_backtest
  def make_short_test_df()
    calls → pd.DataFrame
  def test_run_backtest_skips_report()
    calls → make_long_test_df
    calls → mock_save_and_report.assert_called_once
    calls → patch
    calls → run_backtest
  def test_run_backtest_basic_short_trade()
    calls → all
    calls → isinstance
    calls → len
    calls → make_short_test_df
    calls → run_backtest
  def test_run_backtest_sl_only()
    calls → pd.DataFrame
    calls → run_backtest
  def test_run_backtest_with_initial_state()
    calls → pd.DataFrame
    calls → run_backtest
  def test_run_backtest_finalize_false()
    calls → any
    calls → pd.DataFrame
    calls → run_backtest
  def test_run_backtest_tp_only()
    calls → len
    calls → pd.DataFrame
    calls → run_backtest
  def test_position_carries_over_between_windows()
    calls → len
    calls → pd.DataFrame
    calls → run_backtest
    calls → t[0].startswith

File: trading_analysis/tests/test_signals.py
  def get_minimal_test_df()
    calls → list
    calls → pd.DataFrame
    calls → range
  def test_generate_signals_basic_long()
    calls → generate_signals
    calls → get_minimal_test_df
  def test_macd_signal_generation()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → len
    calls → np.full
    calls → result['long_macd'] == 1.sum
  def test_empty_df()
    calls → generate_signals
    calls → pd.DataFrame
    calls → pytest.raises
  def test_threshold_param_affects_entry()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → result['long_entry'].sum
  def test_stochrsi_none()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → monkeypatch.setattr
    calls → result['StochRSI_K'].isna
    calls → result['StochRSI_K'].isna().all
  def test_custom_long_signals_only_volume()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → result['long_score'] == result['volume_above_avg'].all
    calls → result['long_score'].unique
    calls → set
    calls → set(result['long_score'].unique()).issubset
  def test_generate_signals_short_entry()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → len
    calls → np.linspace
  def test_trend_strength_filter_blocks_entry()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → result['long_entry'].sum
  def test_short_entry_from_roc_only()
    calls → generate_signals
    calls → get_minimal_test_df
    calls → len
    calls → np.linspace
    calls → result['short_entry'].sum
    calls → result['short_score'] == result['short_roc'].all
  def patch_indicators()
    calls → monkeypatch.setattr
    calls → pd.DataFrame
    calls → pd.Series
    calls → pytest.fixture
  def get_test_df_for_signal()
    calls → ValueError
    calls → df['low'].min
    calls → np.full
    calls → np.linspace
    calls → pd.DataFrame
  def test_individual_short_signal()
    calls → generate_signals
    calls → get_test_df_for_signal
    calls → pytest.mark.parametrize

File: trading_analysis/tests/__init__.py

File: trading_analysis/tests/test_utils.py
  def test_prepare_params_for_logging_injects_signals()
    calls → prepare_params_for_logging
  def test_prepare_params_for_logging_handles_none()
    calls → prepare_params_for_logging

File: trading_analysis/tests/test_feature_selection.py
  def test_select_important_features_basic()
    calls → isinstance
    calls → len
    calls → np.random.rand
    calls → np.random.randint
    calls → np.random.seed
    calls → pd.DataFrame
    calls → select_important_features
    calls → set
    calls → set(selected).issubset
  def test_select_important_features_with_min_importance()
    calls → all
    calls → isinstance
    calls → len
    calls → np.random.rand
    calls → np.random.randint
    calls → pd.DataFrame
    calls → select_important_features

File: strategy/objective.py
  def prepare_data()
    calls → calculate_indicators_cached
    calls → df.copy
    calls → generate_signals_cached
    calls → hash_dataframe
    calls → strip_indicators
  def optimize_with_validation()
    calls → Trials
    calls → abs
    calls → all_dd.append
    calls → all_pnl.append
    calls → all_trades.append
    calls → all_wr.append
    calls → best_trial['misc']['vals'].items
    calls → float
    calls → fmin
    calls → isinstance
    calls → len
    calls → max
    calls → np.median
    calls → np.std
    calls → objective
    calls → params.copy
    calls → prepare_data
    calls → print
    calls → run_backtest
    calls → space_eval
    calls → train_result.get
    calls → val_result.get
  def estimate_window_size_from_params()
    calls → best_params.get
    calls → best_params.items
    calls → heavy_penalties.items
    calls → int
    calls → key.startswith
    calls → max
    calls → min
    calls → print
    calls → sum

File: strategy/utils_hashing.py
  def hash_dataframe()
    calls → hashlib.md5
    calls → hashlib.md5(pd.util.hash_pandas_object(df, index=True).values).hexdigest
    calls → pd.util.hash_pandas_object
  def hash_dict()
    calls → hashlib.md5
    calls → hashlib.md5(json.dumps(d, sort_keys=True).encode()).hexdigest
    calls → json.dumps
    calls → json.dumps(d, sort_keys=True).encode
  def hash_params()
    calls → hash_dict

File: strategy/search_space.py

File: strategy/walkforward.py
  def initialize_test()
    calls → datetime.now
    calls → datetime.now(timezone.utc).timestamp
    calls → get_first_candle_from_db
    calls → int
    calls → last_candle.timestamp.timestamp
  def load_initial_train_data()
    calls → load_ohlcv_from_db
  def is_end_of_data()
    calls → datetime.now
    calls → datetime.now(timezone.utc).timestamp
    calls → int
  def calculate_test_range()
    calls → df_train.index[-1].timestamp
    calls → int
  def load_test_window_from_db()
    calls → load_ohlcv_from_db
    calls → print
  def prepare_test_data()
    calls → calculate_indicators_cached
    calls → col.startswith
    calls → generate_signals_cached
    calls → hash_dataframe
    calls → json.dumps
    calls → len
    calls → pd.concat
    calls → print
    calls → sanitize_params
    calls → select_important_features
  def run_evaluation()
    calls → run_backtest
  def update_tracking()
    calls → config.get
    calls → df_test_prepared.index[0].to_pydatetime
    calls → prepare_params_for_logging
    calls → result.get
    calls → save_model_run
    calls → test_date.strftime
    calls → trade_log.append
  def update_training_window()
    calls → pd.concat
    calls → print
  def finalize_walkforward()
    calls → len
    calls → max
    calls → min
    calls → plot_backtest_progress
    calls → print
    calls → sum
  def get_next_test_window()
    calls → calculate_test_range
    calls → is_end_of_data
    calls → load_test_window_from_db
    calls → print
  def initialize_best_params()
    calls → calculate_indicators_cached
    calls → col.startswith
    calls → config.update
    calls → generate_signals_cached
    calls → hash_dataframe
    calls → json.dumps
    calls → optimize_with_validation
    calls → pd.concat
    calls → print
    calls → select_important_features
  def try_prepare_test_data()
    calls → prepare_test_data
    calls → print
  def update_window_size()
    calls → abs
    calls → estimate_window_size_from_params
    calls → int
    calls → print
  def reoptimize_strategy()
    calls → config.update
    calls → optimize_with_validation
    calls → print
  def should_trigger_restart()
    calls → config.get
  def walk_forward_test()
    calls → calculate_inverse_balance_risk
    calls → config.get
    calls → finalize_walkforward
    calls → get_next_test_window
    calls → initialize_best_params
    calls → initialize_test
    calls → load_initial_train_data
    calls → plot_backtest_progress
    calls → print
    calls → reoptimize_strategy
    calls → run_evaluation
    calls → should_trigger_restart
    calls → split_train_val
    calls → try_prepare_test_data
    calls → update_tracking
    calls → update_training_window
    calls → update_window_size

File: strategy/tests/test_walkforward.py
  def test_update_tracking_calls_save_model_run()
    calls → isinstance
    calls → len
    calls → mock_save_model_run.assert_called_once
    calls → patch
    calls → pd.DataFrame
    calls → pd.to_datetime
    calls → update_tracking
  def test_update_tracking_calls_save_model_run()
    calls → isinstance
    calls → len
    calls → mock_save_model_run.assert_called_once
    calls → patch
    calls → pd.DataFrame
    calls → pd.to_datetime
    calls → update_tracking
  def make()
    calls → BASE_CONFIG.copy
    calls → BASE_RESULT.copy
    calls → config.update
    calls → result.update
  def test_drawdown_trigger()
    calls → make
    calls → should_trigger_restart
  def test_max_loss_streak_trigger()
    calls → make
    calls → should_trigger_restart
  def test_no_trades_once_no_trigger()
    calls → make
    calls → should_trigger_restart
  def test_no_trades_twice_trigger()
    calls → make
    calls → should_trigger_restart
  def test_winrate_drop_trigger()
    calls → make
    calls → should_trigger_restart
  def test_no_trigger_if_all_good()
    calls → make
    calls → should_trigger_restart
  def test_multiple_restart_conditions_triggered()
    calls → should_trigger_restart
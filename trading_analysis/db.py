# trading_analysis/db.py
import numpy as np
import json
import time
from datetime import datetime, timezone
from sqlalchemy.orm import Session
from trading_analysis.bybit_api import find_first_kline_timestamp, get_bybit_kline
from trading_analysis.models import Candle, Base, ModelRun
from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from trading_analysis.models import Base, Candle
import pandas as pd
from sqlalchemy import func
from datetime import timedelta

engine = create_engine("sqlite:///market_data.db", echo=False, future=True)
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False)

def init_db():
    Base.metadata.create_all(engine)

def save_ohlcv_to_db(df: pd.DataFrame, symbol: str, interval: str):
    if df.empty:
        print(f"[DB] ‚ùå –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è {symbol} ({interval}) ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º.")
        return

    df = df.copy().reset_index()
    df["timestamp"] = (df["timestamp"].astype("int64") // 10**6)

    session = SessionLocal()

    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ timestamps –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    existing_ts = set(
        ts for (ts,) in session.query(Candle.timestamp)
        .filter(Candle.symbol == symbol)
        .filter(Candle.interval == interval)
        .filter(Candle.timestamp.in_(df["timestamp"].tolist()))
        .all()
    )

    new_rows = df[~df["timestamp"].isin(existing_ts)]

    records = [
        Candle(
            symbol=symbol,
            interval=interval,  # üÜï –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            timestamp=int(row["timestamp"]),
            open=row["open"],
            high=row["high"],
            low=row["low"],
            close=row["close"],
            volume=row["volume"]
        )
        for _, row in new_rows.iterrows()
    ]

    if records:
        session.bulk_save_objects(records)
        session.commit()
        print(f"[DB] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(records)} –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval})")
    else:
        print(f"[DB] üîÅ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval})")

    session.close()

def load_ohlcv_from_db(
    symbol: str,
    interval: str,
    start_timestamp: int = None,
    end_timestamp: int = None,
    limit: int = None,
) -> pd.DataFrame:
    session = SessionLocal()

    stmt = select(Candle).where(
        Candle.symbol == symbol,
        Candle.interval == interval  # ‚¨Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
    )

    if start_timestamp is not None:
        stmt = stmt.where(Candle.timestamp >= start_timestamp)
    if end_timestamp is not None:
        stmt = stmt.where(Candle.timestamp <= end_timestamp)

    stmt = stmt.order_by(Candle.timestamp.asc())

    if limit is not None:
        stmt = stmt.limit(limit)

    candles = session.execute(stmt).scalars().all()
    session.close()

    if not candles:
        raise ValueError(f"No OHLCV data found for {symbol} ({interval}) with given parameters.")

    data = [{
        "timestamp": c.timestamp,
        "open": c.open,
        "high": c.high,
        "low": c.low,
        "close": c.close,
        "volume": c.volume
    } for c in candles]

    df = pd.DataFrame(data)
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    df.set_index("timestamp", inplace=True)

    return df

def get_latest_timestamp(symbol: str) -> int:
    session = SessionLocal()
    result = session.query(func.max(Candle.timestamp)).filter(Candle.symbol == symbol).scalar()
    session.close()
    return result or 0

def fetch_and_save_all_ohlcv(symbol: str, interval: str = "30", batch_limit: int = 1000):
    print(f"üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–µ—á–∏ –¥–ª—è {symbol} ({interval}m)...")
    start_ts = find_first_kline_timestamp(symbol, interval)
    now_ts = int(datetime.now(timezone.utc).timestamp() * 1000)

    total_saved = 0
    last_ts_seen = None

    while start_ts < now_ts:
        df = get_bybit_kline(symbol, interval, limit=batch_limit, start=start_ts)
        if df.empty:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π DataFrame ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            break

        last_ts = int(df.index[-1].timestamp() * 1000)
        if last_ts == last_ts_seen:
            print("üõë –ü–æ–≤—Ç–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞.")
            break
        last_ts_seen = last_ts

        save_ohlcv_to_db(df, symbol, interval=interval)
        total_saved += len(df)

        start_ts = last_ts + 1  # —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        print(f"üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –µ—â—ë {len(df)} —Å–≤–µ—á–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        time.sleep(0.25)

    print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–≤–µ—á–µ–π: {total_saved}")

def interval_to_timedelta(interval: str) -> timedelta:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª Bybit –≤ timedelta.
    –ü—Ä–∏–º–µ—Ä—ã: '1', '3', ..., '720', 'D', 'W', 'M'
    """
    if interval.isdigit():
        return timedelta(minutes=int(interval))
    elif interval == 'D':
        return timedelta(days=1)
    elif interval == 'W':
        return timedelta(weeks=1)
    elif interval == 'M':
        return timedelta(days=30)  # —É—Å—Ä–µ–¥–Ω—ë–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Å—è—Ü–∞
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ Bybit: '{interval}'")

def check_ohlcv_integrity(symbol: str, interval: str = '30'):
    print(f"üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} ({interval})...")
    df = load_ohlcv_from_db(symbol, limit=100_000, interval=interval)

    if df.empty:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.")
        return

    try:
        expected_delta = interval_to_timedelta(interval)
    except ValueError as e:
        print(f"‚ùå {e}")
        return

    missing_timestamps = []

    timestamps = df.index.to_list()
    for prev, curr in zip(timestamps[:-1], timestamps[1:]):
        delta = curr - prev
        if delta != expected_delta:
            missing_count = int(delta / expected_delta) - 1
            for i in range(missing_count):
                missing_ts = prev + expected_delta * (i + 1)
                missing_timestamps.append(missing_ts)

    if missing_timestamps:
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–≤–µ—á–∏: {len(missing_timestamps)}")
        for ts in missing_timestamps[:10]:
            print(f" - {ts}")
        if len(missing_timestamps) > 10:
            print("...–∏ –µ—â—ë", len(missing_timestamps) - 10)
    else:
        print("‚úÖ –í—Å–µ —Å–≤–µ—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ü–µ–ª–æ—Å—Ç–µ–Ω.")


def convert_np(obj):
    if isinstance(obj, np.generic):
        return obj.item()
    if isinstance(obj, dict):
        return {k: convert_np(v) for k, v in obj.items()}
    return obj

def save_model_run(symbol, date, params, loss, pnl, total_trades, winrate, risk_pct, retrained):
    session = SessionLocal()
    params_clean = convert_np(params)

    run = ModelRun(
        symbol=symbol,
        date=date,
        params_json=json.dumps(params_clean),
        loss=loss,
        pnl=pnl,
        total_trades=total_trades,
        winrate=winrate,
        risk_pct=risk_pct,
        retrained=retrained
    )
    session.add(run)
    session.commit()
    session.close()
    